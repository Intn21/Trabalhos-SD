/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ClienteServidor
{
  public partial class ClienteServidor {
    public interface ISync {
      bool insereVertice(int nome, int cor, string descricao, double peso);
      bool removeVertice(int nomeVertice);
      bool modificaVertice(int nome, int cor, string descricao, double peso);
      vertice lerVertice(int nome);
      List<vertice> getVertices(aresta E);
      List<vertice> getVizinhos(int nome);
      bool insereAresta(int v1, int v2, double peso, bool direcionado, string descricao);
      bool removeAresta(int v1, int v2);
      bool modificaAresta(int v1, int v2, double peso, bool direcionado, string descricao);
      aresta lerAresta(int v1, int v2);
      List<aresta> getArestas(int vertice);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_insereVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso);
      bool End_insereVertice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_removeVertice(AsyncCallback callback, object state, int nomeVertice);
      bool End_removeVertice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_modificaVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso);
      bool End_modificaVertice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_lerVertice(AsyncCallback callback, object state, int nome);
      vertice End_lerVertice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getVertices(AsyncCallback callback, object state, aresta E);
      List<vertice> End_getVertices(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getVizinhos(AsyncCallback callback, object state, int nome);
      List<vertice> End_getVizinhos(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_insereAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao);
      bool End_insereAresta(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_removeAresta(AsyncCallback callback, object state, int v1, int v2);
      bool End_removeAresta(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_modificaAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao);
      bool End_modificaAresta(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_lerAresta(AsyncCallback callback, object state, int v1, int v2);
      aresta End_lerAresta(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getArestas(AsyncCallback callback, object state, int vertice);
      List<aresta> End_getArestas(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_insereVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso)
      {
        return send_insereVertice(callback, state, nome, cor, descricao, peso);
      }

      public bool End_insereVertice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_insereVertice();
      }

      #endif

      public bool insereVertice(int nome, int cor, string descricao, double peso)
      {
        #if !SILVERLIGHT
        send_insereVertice(nome, cor, descricao, peso);
        return recv_insereVertice();

        #else
        var asyncResult = Begin_insereVertice(null, null, nome, cor, descricao, peso);
        return End_insereVertice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_insereVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso)
      #else
      public void send_insereVertice(int nome, int cor, string descricao, double peso)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("insereVertice", TMessageType.Call, seqid_));
        insereVertice_args args = new insereVertice_args();
        args.Nome = nome;
        args.Cor = cor;
        args.Descricao = descricao;
        args.Peso = peso;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_insereVertice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        insereVertice_result result = new insereVertice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insereVertice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeVertice(AsyncCallback callback, object state, int nomeVertice)
      {
        return send_removeVertice(callback, state, nomeVertice);
      }

      public bool End_removeVertice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeVertice();
      }

      #endif

      public bool removeVertice(int nomeVertice)
      {
        #if !SILVERLIGHT
        send_removeVertice(nomeVertice);
        return recv_removeVertice();

        #else
        var asyncResult = Begin_removeVertice(null, null, nomeVertice);
        return End_removeVertice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeVertice(AsyncCallback callback, object state, int nomeVertice)
      #else
      public void send_removeVertice(int nomeVertice)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeVertice", TMessageType.Call, seqid_));
        removeVertice_args args = new removeVertice_args();
        args.NomeVertice = nomeVertice;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_removeVertice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeVertice_result result = new removeVertice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeVertice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_modificaVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso)
      {
        return send_modificaVertice(callback, state, nome, cor, descricao, peso);
      }

      public bool End_modificaVertice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_modificaVertice();
      }

      #endif

      public bool modificaVertice(int nome, int cor, string descricao, double peso)
      {
        #if !SILVERLIGHT
        send_modificaVertice(nome, cor, descricao, peso);
        return recv_modificaVertice();

        #else
        var asyncResult = Begin_modificaVertice(null, null, nome, cor, descricao, peso);
        return End_modificaVertice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_modificaVertice(AsyncCallback callback, object state, int nome, int cor, string descricao, double peso)
      #else
      public void send_modificaVertice(int nome, int cor, string descricao, double peso)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("modificaVertice", TMessageType.Call, seqid_));
        modificaVertice_args args = new modificaVertice_args();
        args.Nome = nome;
        args.Cor = cor;
        args.Descricao = descricao;
        args.Peso = peso;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_modificaVertice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        modificaVertice_result result = new modificaVertice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modificaVertice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_lerVertice(AsyncCallback callback, object state, int nome)
      {
        return send_lerVertice(callback, state, nome);
      }

      public vertice End_lerVertice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_lerVertice();
      }

      #endif

      public vertice lerVertice(int nome)
      {
        #if !SILVERLIGHT
        send_lerVertice(nome);
        return recv_lerVertice();

        #else
        var asyncResult = Begin_lerVertice(null, null, nome);
        return End_lerVertice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_lerVertice(AsyncCallback callback, object state, int nome)
      #else
      public void send_lerVertice(int nome)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("lerVertice", TMessageType.Call, seqid_));
        lerVertice_args args = new lerVertice_args();
        args.Nome = nome;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public vertice recv_lerVertice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        lerVertice_result result = new lerVertice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lerVertice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getVertices(AsyncCallback callback, object state, aresta E)
      {
        return send_getVertices(callback, state, E);
      }

      public List<vertice> End_getVertices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getVertices();
      }

      #endif

      public List<vertice> getVertices(aresta E)
      {
        #if !SILVERLIGHT
        send_getVertices(E);
        return recv_getVertices();

        #else
        var asyncResult = Begin_getVertices(null, null, E);
        return End_getVertices(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getVertices(AsyncCallback callback, object state, aresta E)
      #else
      public void send_getVertices(aresta E)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getVertices", TMessageType.Call, seqid_));
        getVertices_args args = new getVertices_args();
        args.E = E;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<vertice> recv_getVertices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getVertices_result result = new getVertices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVertices failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getVizinhos(AsyncCallback callback, object state, int nome)
      {
        return send_getVizinhos(callback, state, nome);
      }

      public List<vertice> End_getVizinhos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getVizinhos();
      }

      #endif

      public List<vertice> getVizinhos(int nome)
      {
        #if !SILVERLIGHT
        send_getVizinhos(nome);
        return recv_getVizinhos();

        #else
        var asyncResult = Begin_getVizinhos(null, null, nome);
        return End_getVizinhos(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getVizinhos(AsyncCallback callback, object state, int nome)
      #else
      public void send_getVizinhos(int nome)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getVizinhos", TMessageType.Call, seqid_));
        getVizinhos_args args = new getVizinhos_args();
        args.Nome = nome;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<vertice> recv_getVizinhos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getVizinhos_result result = new getVizinhos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVizinhos failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_insereAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao)
      {
        return send_insereAresta(callback, state, v1, v2, peso, direcionado, descricao);
      }

      public bool End_insereAresta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_insereAresta();
      }

      #endif

      public bool insereAresta(int v1, int v2, double peso, bool direcionado, string descricao)
      {
        #if !SILVERLIGHT
        send_insereAresta(v1, v2, peso, direcionado, descricao);
        return recv_insereAresta();

        #else
        var asyncResult = Begin_insereAresta(null, null, v1, v2, peso, direcionado, descricao);
        return End_insereAresta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_insereAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao)
      #else
      public void send_insereAresta(int v1, int v2, double peso, bool direcionado, string descricao)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("insereAresta", TMessageType.Call, seqid_));
        insereAresta_args args = new insereAresta_args();
        args.V1 = v1;
        args.V2 = v2;
        args.Peso = peso;
        args.Direcionado = direcionado;
        args.Descricao = descricao;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_insereAresta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        insereAresta_result result = new insereAresta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "insereAresta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeAresta(AsyncCallback callback, object state, int v1, int v2)
      {
        return send_removeAresta(callback, state, v1, v2);
      }

      public bool End_removeAresta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeAresta();
      }

      #endif

      public bool removeAresta(int v1, int v2)
      {
        #if !SILVERLIGHT
        send_removeAresta(v1, v2);
        return recv_removeAresta();

        #else
        var asyncResult = Begin_removeAresta(null, null, v1, v2);
        return End_removeAresta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeAresta(AsyncCallback callback, object state, int v1, int v2)
      #else
      public void send_removeAresta(int v1, int v2)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeAresta", TMessageType.Call, seqid_));
        removeAresta_args args = new removeAresta_args();
        args.V1 = v1;
        args.V2 = v2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_removeAresta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeAresta_result result = new removeAresta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeAresta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_modificaAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao)
      {
        return send_modificaAresta(callback, state, v1, v2, peso, direcionado, descricao);
      }

      public bool End_modificaAresta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_modificaAresta();
      }

      #endif

      public bool modificaAresta(int v1, int v2, double peso, bool direcionado, string descricao)
      {
        #if !SILVERLIGHT
        send_modificaAresta(v1, v2, peso, direcionado, descricao);
        return recv_modificaAresta();

        #else
        var asyncResult = Begin_modificaAresta(null, null, v1, v2, peso, direcionado, descricao);
        return End_modificaAresta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_modificaAresta(AsyncCallback callback, object state, int v1, int v2, double peso, bool direcionado, string descricao)
      #else
      public void send_modificaAresta(int v1, int v2, double peso, bool direcionado, string descricao)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("modificaAresta", TMessageType.Call, seqid_));
        modificaAresta_args args = new modificaAresta_args();
        args.V1 = v1;
        args.V2 = v2;
        args.Peso = peso;
        args.Direcionado = direcionado;
        args.Descricao = descricao;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_modificaAresta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        modificaAresta_result result = new modificaAresta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modificaAresta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_lerAresta(AsyncCallback callback, object state, int v1, int v2)
      {
        return send_lerAresta(callback, state, v1, v2);
      }

      public aresta End_lerAresta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_lerAresta();
      }

      #endif

      public aresta lerAresta(int v1, int v2)
      {
        #if !SILVERLIGHT
        send_lerAresta(v1, v2);
        return recv_lerAresta();

        #else
        var asyncResult = Begin_lerAresta(null, null, v1, v2);
        return End_lerAresta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_lerAresta(AsyncCallback callback, object state, int v1, int v2)
      #else
      public void send_lerAresta(int v1, int v2)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("lerAresta", TMessageType.Call, seqid_));
        lerAresta_args args = new lerAresta_args();
        args.V1 = v1;
        args.V2 = v2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public aresta recv_lerAresta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        lerAresta_result result = new lerAresta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lerAresta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getArestas(AsyncCallback callback, object state, int vertice)
      {
        return send_getArestas(callback, state, vertice);
      }

      public List<aresta> End_getArestas(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getArestas();
      }

      #endif

      public List<aresta> getArestas(int vertice)
      {
        #if !SILVERLIGHT
        send_getArestas(vertice);
        return recv_getArestas();

        #else
        var asyncResult = Begin_getArestas(null, null, vertice);
        return End_getArestas(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getArestas(AsyncCallback callback, object state, int vertice)
      #else
      public void send_getArestas(int vertice)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getArestas", TMessageType.Call, seqid_));
        getArestas_args args = new getArestas_args();
        args.Vertice = vertice;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<aresta> recv_getArestas()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getArestas_result result = new getArestas_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getArestas failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["insereVertice"] = insereVertice_Process;
        processMap_["removeVertice"] = removeVertice_Process;
        processMap_["modificaVertice"] = modificaVertice_Process;
        processMap_["lerVertice"] = lerVertice_Process;
        processMap_["getVertices"] = getVertices_Process;
        processMap_["getVizinhos"] = getVizinhos_Process;
        processMap_["insereAresta"] = insereAresta_Process;
        processMap_["removeAresta"] = removeAresta_Process;
        processMap_["modificaAresta"] = modificaAresta_Process;
        processMap_["lerAresta"] = lerAresta_Process;
        processMap_["getArestas"] = getArestas_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void insereVertice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        insereVertice_args args = new insereVertice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        insereVertice_result result = new insereVertice_result();
        try
        {
          result.Success = iface_.insereVertice(args.Nome, args.Cor, args.Descricao, args.Peso);
          oprot.WriteMessageBegin(new TMessage("insereVertice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("insereVertice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeVertice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeVertice_args args = new removeVertice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeVertice_result result = new removeVertice_result();
        try
        {
          result.Success = iface_.removeVertice(args.NomeVertice);
          oprot.WriteMessageBegin(new TMessage("removeVertice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeVertice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void modificaVertice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        modificaVertice_args args = new modificaVertice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        modificaVertice_result result = new modificaVertice_result();
        try
        {
          result.Success = iface_.modificaVertice(args.Nome, args.Cor, args.Descricao, args.Peso);
          oprot.WriteMessageBegin(new TMessage("modificaVertice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("modificaVertice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void lerVertice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        lerVertice_args args = new lerVertice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        lerVertice_result result = new lerVertice_result();
        try
        {
          result.Success = iface_.lerVertice(args.Nome);
          oprot.WriteMessageBegin(new TMessage("lerVertice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("lerVertice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getVertices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getVertices_args args = new getVertices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getVertices_result result = new getVertices_result();
        try
        {
          result.Success = iface_.getVertices(args.E);
          oprot.WriteMessageBegin(new TMessage("getVertices", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getVertices", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getVizinhos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getVizinhos_args args = new getVizinhos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getVizinhos_result result = new getVizinhos_result();
        try
        {
          result.Success = iface_.getVizinhos(args.Nome);
          oprot.WriteMessageBegin(new TMessage("getVizinhos", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getVizinhos", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void insereAresta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        insereAresta_args args = new insereAresta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        insereAresta_result result = new insereAresta_result();
        try
        {
          result.Success = iface_.insereAresta(args.V1, args.V2, args.Peso, args.Direcionado, args.Descricao);
          oprot.WriteMessageBegin(new TMessage("insereAresta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("insereAresta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeAresta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeAresta_args args = new removeAresta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeAresta_result result = new removeAresta_result();
        try
        {
          result.Success = iface_.removeAresta(args.V1, args.V2);
          oprot.WriteMessageBegin(new TMessage("removeAresta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("removeAresta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void modificaAresta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        modificaAresta_args args = new modificaAresta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        modificaAresta_result result = new modificaAresta_result();
        try
        {
          result.Success = iface_.modificaAresta(args.V1, args.V2, args.Peso, args.Direcionado, args.Descricao);
          oprot.WriteMessageBegin(new TMessage("modificaAresta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("modificaAresta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void lerAresta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        lerAresta_args args = new lerAresta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        lerAresta_result result = new lerAresta_result();
        try
        {
          result.Success = iface_.lerAresta(args.V1, args.V2);
          oprot.WriteMessageBegin(new TMessage("lerAresta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("lerAresta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getArestas_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getArestas_args args = new getArestas_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getArestas_result result = new getArestas_result();
        try
        {
          result.Success = iface_.getArestas(args.Vertice);
          oprot.WriteMessageBegin(new TMessage("getArestas", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getArestas", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insereVertice_args : TBase
    {
      private int _nome;
      private int _cor;
      private string _descricao;
      private double _peso;

      public int Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }

      public int Cor
      {
        get
        {
          return _cor;
        }
        set
        {
          __isset.cor = true;
          this._cor = value;
        }
      }

      public string Descricao
      {
        get
        {
          return _descricao;
        }
        set
        {
          __isset.descricao = true;
          this._descricao = value;
        }
      }

      public double Peso
      {
        get
        {
          return _peso;
        }
        set
        {
          __isset.peso = true;
          this._peso = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
        public bool cor;
        public bool descricao;
        public bool peso;
      }

      public insereVertice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Nome = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Cor = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Descricao = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Double) {
                  Peso = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("insereVertice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.nome) {
            field.Name = "nome";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Nome);
            oprot.WriteFieldEnd();
          }
          if (__isset.cor) {
            field.Name = "cor";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Cor);
            oprot.WriteFieldEnd();
          }
          if (Descricao != null && __isset.descricao) {
            field.Name = "descricao";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Descricao);
            oprot.WriteFieldEnd();
          }
          if (__isset.peso) {
            field.Name = "peso";
            field.Type = TType.Double;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Peso);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insereVertice_args(");
        bool __first = true;
        if (__isset.nome) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nome: ");
          __sb.Append(Nome);
        }
        if (__isset.cor) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cor: ");
          __sb.Append(Cor);
        }
        if (Descricao != null && __isset.descricao) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Descricao: ");
          __sb.Append(Descricao);
        }
        if (__isset.peso) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peso: ");
          __sb.Append(Peso);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insereVertice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public insereVertice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("insereVertice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insereVertice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeVertice_args : TBase
    {
      private int _nomeVertice;

      public int NomeVertice
      {
        get
        {
          return _nomeVertice;
        }
        set
        {
          __isset.nomeVertice = true;
          this._nomeVertice = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nomeVertice;
      }

      public removeVertice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  NomeVertice = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeVertice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.nomeVertice) {
            field.Name = "nomeVertice";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NomeVertice);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeVertice_args(");
        bool __first = true;
        if (__isset.nomeVertice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NomeVertice: ");
          __sb.Append(NomeVertice);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeVertice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public removeVertice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeVertice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeVertice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificaVertice_args : TBase
    {
      private int _nome;
      private int _cor;
      private string _descricao;
      private double _peso;

      public int Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }

      public int Cor
      {
        get
        {
          return _cor;
        }
        set
        {
          __isset.cor = true;
          this._cor = value;
        }
      }

      public string Descricao
      {
        get
        {
          return _descricao;
        }
        set
        {
          __isset.descricao = true;
          this._descricao = value;
        }
      }

      public double Peso
      {
        get
        {
          return _peso;
        }
        set
        {
          __isset.peso = true;
          this._peso = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
        public bool cor;
        public bool descricao;
        public bool peso;
      }

      public modificaVertice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Nome = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Cor = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Descricao = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Double) {
                  Peso = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificaVertice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.nome) {
            field.Name = "nome";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Nome);
            oprot.WriteFieldEnd();
          }
          if (__isset.cor) {
            field.Name = "cor";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Cor);
            oprot.WriteFieldEnd();
          }
          if (Descricao != null && __isset.descricao) {
            field.Name = "descricao";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Descricao);
            oprot.WriteFieldEnd();
          }
          if (__isset.peso) {
            field.Name = "peso";
            field.Type = TType.Double;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Peso);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificaVertice_args(");
        bool __first = true;
        if (__isset.nome) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nome: ");
          __sb.Append(Nome);
        }
        if (__isset.cor) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Cor: ");
          __sb.Append(Cor);
        }
        if (Descricao != null && __isset.descricao) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Descricao: ");
          __sb.Append(Descricao);
        }
        if (__isset.peso) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peso: ");
          __sb.Append(Peso);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificaVertice_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public modificaVertice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificaVertice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificaVertice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lerVertice_args : TBase
    {
      private int _nome;

      public int Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
      }

      public lerVertice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Nome = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("lerVertice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.nome) {
            field.Name = "nome";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Nome);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("lerVertice_args(");
        bool __first = true;
        if (__isset.nome) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nome: ");
          __sb.Append(Nome);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lerVertice_result : TBase
    {
      private vertice _success;

      public vertice Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public lerVertice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new vertice();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("lerVertice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("lerVertice_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getVertices_args : TBase
    {
      private aresta _E;

      public aresta E
      {
        get
        {
          return _E;
        }
        set
        {
          __isset.E = true;
          this._E = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool E;
      }

      public getVertices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  E = new aresta();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getVertices_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (E != null && __isset.E) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getVertices_args(");
        bool __first = true;
        if (E != null && __isset.E) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getVertices_result : TBase
    {
      private List<vertice> _success;

      public List<vertice> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getVertices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<vertice>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      vertice _elem10;
                      _elem10 = new vertice();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getVertices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (vertice _iter11 in Success)
                {
                  _iter11.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getVertices_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getVizinhos_args : TBase
    {
      private int _nome;

      public int Nome
      {
        get
        {
          return _nome;
        }
        set
        {
          __isset.nome = true;
          this._nome = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nome;
      }

      public getVizinhos_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Nome = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getVizinhos_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.nome) {
            field.Name = "nome";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Nome);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getVizinhos_args(");
        bool __first = true;
        if (__isset.nome) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nome: ");
          __sb.Append(Nome);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getVizinhos_result : TBase
    {
      private List<vertice> _success;

      public List<vertice> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getVizinhos_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<vertice>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      vertice _elem14;
                      _elem14 = new vertice();
                      _elem14.Read(iprot);
                      Success.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getVizinhos_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (vertice _iter15 in Success)
                {
                  _iter15.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getVizinhos_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insereAresta_args : TBase
    {
      private int _v1;
      private int _v2;
      private double _peso;
      private bool _direcionado;
      private string _descricao;

      public int V1
      {
        get
        {
          return _v1;
        }
        set
        {
          __isset.v1 = true;
          this._v1 = value;
        }
      }

      public int V2
      {
        get
        {
          return _v2;
        }
        set
        {
          __isset.v2 = true;
          this._v2 = value;
        }
      }

      public double Peso
      {
        get
        {
          return _peso;
        }
        set
        {
          __isset.peso = true;
          this._peso = value;
        }
      }

      public bool Direcionado
      {
        get
        {
          return _direcionado;
        }
        set
        {
          __isset.direcionado = true;
          this._direcionado = value;
        }
      }

      public string Descricao
      {
        get
        {
          return _descricao;
        }
        set
        {
          __isset.descricao = true;
          this._descricao = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool v1;
        public bool v2;
        public bool peso;
        public bool direcionado;
        public bool descricao;
      }

      public insereAresta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  V1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  V2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Double) {
                  Peso = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  Direcionado = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Descricao = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("insereAresta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.v1) {
            field.Name = "v1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V1);
            oprot.WriteFieldEnd();
          }
          if (__isset.v2) {
            field.Name = "v2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V2);
            oprot.WriteFieldEnd();
          }
          if (__isset.peso) {
            field.Name = "peso";
            field.Type = TType.Double;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Peso);
            oprot.WriteFieldEnd();
          }
          if (__isset.direcionado) {
            field.Name = "direcionado";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Direcionado);
            oprot.WriteFieldEnd();
          }
          if (Descricao != null && __isset.descricao) {
            field.Name = "descricao";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Descricao);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insereAresta_args(");
        bool __first = true;
        if (__isset.v1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V1: ");
          __sb.Append(V1);
        }
        if (__isset.v2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V2: ");
          __sb.Append(V2);
        }
        if (__isset.peso) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peso: ");
          __sb.Append(Peso);
        }
        if (__isset.direcionado) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direcionado: ");
          __sb.Append(Direcionado);
        }
        if (Descricao != null && __isset.descricao) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Descricao: ");
          __sb.Append(Descricao);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class insereAresta_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public insereAresta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("insereAresta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("insereAresta_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAresta_args : TBase
    {
      private int _v1;
      private int _v2;

      public int V1
      {
        get
        {
          return _v1;
        }
        set
        {
          __isset.v1 = true;
          this._v1 = value;
        }
      }

      public int V2
      {
        get
        {
          return _v2;
        }
        set
        {
          __isset.v2 = true;
          this._v2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool v1;
        public bool v2;
      }

      public removeAresta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  V1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  V2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeAresta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.v1) {
            field.Name = "v1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V1);
            oprot.WriteFieldEnd();
          }
          if (__isset.v2) {
            field.Name = "v2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V2);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeAresta_args(");
        bool __first = true;
        if (__isset.v1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V1: ");
          __sb.Append(V1);
        }
        if (__isset.v2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V2: ");
          __sb.Append(V2);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAresta_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public removeAresta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("removeAresta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("removeAresta_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificaAresta_args : TBase
    {
      private int _v1;
      private int _v2;
      private double _peso;
      private bool _direcionado;
      private string _descricao;

      public int V1
      {
        get
        {
          return _v1;
        }
        set
        {
          __isset.v1 = true;
          this._v1 = value;
        }
      }

      public int V2
      {
        get
        {
          return _v2;
        }
        set
        {
          __isset.v2 = true;
          this._v2 = value;
        }
      }

      public double Peso
      {
        get
        {
          return _peso;
        }
        set
        {
          __isset.peso = true;
          this._peso = value;
        }
      }

      public bool Direcionado
      {
        get
        {
          return _direcionado;
        }
        set
        {
          __isset.direcionado = true;
          this._direcionado = value;
        }
      }

      public string Descricao
      {
        get
        {
          return _descricao;
        }
        set
        {
          __isset.descricao = true;
          this._descricao = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool v1;
        public bool v2;
        public bool peso;
        public bool direcionado;
        public bool descricao;
      }

      public modificaAresta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  V1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  V2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Double) {
                  Peso = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  Direcionado = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Descricao = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificaAresta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.v1) {
            field.Name = "v1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V1);
            oprot.WriteFieldEnd();
          }
          if (__isset.v2) {
            field.Name = "v2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V2);
            oprot.WriteFieldEnd();
          }
          if (__isset.peso) {
            field.Name = "peso";
            field.Type = TType.Double;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Peso);
            oprot.WriteFieldEnd();
          }
          if (__isset.direcionado) {
            field.Name = "direcionado";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Direcionado);
            oprot.WriteFieldEnd();
          }
          if (Descricao != null && __isset.descricao) {
            field.Name = "descricao";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Descricao);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificaAresta_args(");
        bool __first = true;
        if (__isset.v1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V1: ");
          __sb.Append(V1);
        }
        if (__isset.v2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V2: ");
          __sb.Append(V2);
        }
        if (__isset.peso) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Peso: ");
          __sb.Append(Peso);
        }
        if (__isset.direcionado) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Direcionado: ");
          __sb.Append(Direcionado);
        }
        if (Descricao != null && __isset.descricao) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Descricao: ");
          __sb.Append(Descricao);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificaAresta_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public modificaAresta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificaAresta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificaAresta_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lerAresta_args : TBase
    {
      private int _v1;
      private int _v2;

      public int V1
      {
        get
        {
          return _v1;
        }
        set
        {
          __isset.v1 = true;
          this._v1 = value;
        }
      }

      public int V2
      {
        get
        {
          return _v2;
        }
        set
        {
          __isset.v2 = true;
          this._v2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool v1;
        public bool v2;
      }

      public lerAresta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  V1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  V2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("lerAresta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.v1) {
            field.Name = "v1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V1);
            oprot.WriteFieldEnd();
          }
          if (__isset.v2) {
            field.Name = "v2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(V2);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("lerAresta_args(");
        bool __first = true;
        if (__isset.v1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V1: ");
          __sb.Append(V1);
        }
        if (__isset.v2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("V2: ");
          __sb.Append(V2);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lerAresta_result : TBase
    {
      private aresta _success;

      public aresta Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public lerAresta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new aresta();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("lerAresta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("lerAresta_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getArestas_args : TBase
    {
      private int _vertice;

      public int Vertice
      {
        get
        {
          return _vertice;
        }
        set
        {
          __isset.vertice = true;
          this._vertice = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool vertice;
      }

      public getArestas_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Vertice = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getArestas_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.vertice) {
            field.Name = "vertice";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Vertice);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getArestas_args(");
        bool __first = true;
        if (__isset.vertice) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Vertice: ");
          __sb.Append(Vertice);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getArestas_result : TBase
    {
      private List<aresta> _success;

      public List<aresta> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getArestas_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<aresta>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      aresta _elem18;
                      _elem18 = new aresta();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getArestas_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (aresta _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getArestas_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
